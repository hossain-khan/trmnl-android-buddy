name: Keystore Diagnostics and Testing

# This workflow provides comprehensive keystore diagnostics and testing
# It can be triggered manually to verify and troubleshoot keystore configuration:
# 1. Base64 keystore decoding and validation
# 2. Keystore password verification
# 3. Key alias existence and accessibility
# 4. Key password validation
# 5. Keystore type detection (JKS, PKCS12, JCEKS)
# 6. File signing capability testing with jarsigner
# 7. Private key accessibility analysis
# 8. Comparison with working debug keystore
# 9. Multiple signing approach testing
# 10. Comprehensive error diagnostics and artifact collection

on:
  # Manual trigger only - run this to test your keystore configuration
  workflow_dispatch:

jobs:
  test-keystore:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Verify Java and Keytool Installation
        run: |
          echo "Java version:"
          java -version
          
          echo "Keytool version:"
          keytool -help | head -n 1

      - name: Create Test Directory
        run: mkdir -p keystore-test-artifacts

      - name: Check KEYSTORE_BASE64 Secret Length
        run: |
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" ]]; then
            SECRET_LENGTH=$(echo "${{ secrets.KEYSTORE_BASE64 }}" | wc -c)
            echo "✅ KEYSTORE_BASE64 secret is set (length: $SECRET_LENGTH chars)"
          else
            echo "❌ KEYSTORE_BASE64 secret is not set"
            exit 1
          fi

      - name: Decode Keystore
        run: |
          # Decode the base64 keystore to a file
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore-test-artifacts/release.keystore
          
          # Check if the file was created and has content
          if [ -s keystore-test-artifacts/release.keystore ]; then
            echo "✅ Keystore decoded successfully"
            echo "File size: $(wc -c < keystore-test-artifacts/release.keystore) bytes"
            echo "File details:"
            ls -la keystore-test-artifacts/release.keystore
          
            # Check file type
            file keystore-test-artifacts/release.keystore
          
            # Show first few bytes as hex (for debugging)
            echo "First 32 bytes as hex:"
            hexdump -C -n 32 keystore-test-artifacts/release.keystore
          else
            echo "❌ Keystore file is empty or not created properly"
            exit 1
          fi

      - name: Dump Keystore Information
        if: always()  # Run even if previous steps failed
        run: |
          echo "Dumping keystore information (with sensitive data redacted)..."
          
          # List all entries without showing certificates
          echo "All keystore entries:"
          keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep -v "Certificate fingerprint"
          
          # Try to extract aliases
          echo "Attempting to extract aliases:"
          keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" | grep -E ',[^,]+, PrivateKeyEntry' | sed 's/,.*//' || echo "No aliases could be extracted"
          
          # Check if the configured alias exists
          echo "Checking if configured alias exists:"
          keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" > /dev/null 2>&1
          if [ $? -eq 0 ]; then
            echo "✅ Alias '${{ secrets.KEY_ALIAS }}' exists in keystore"
          else
            echo "❌ Alias '${{ secrets.KEY_ALIAS }}' NOT found in keystore"
          fi

      - name: Test Keystore with Password
        run: |
          echo "Testing keystore with provided password..."
          keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > keystore-test-artifacts/output.txt 2>&1 || true
          
          if grep -q "Keystore type:" keystore-test-artifacts/output.txt; then
            echo "✅ Keystore password is correct"
            cat keystore-test-artifacts/output.txt
          else
            echo "❌ Keystore password is incorrect or keystore format is invalid"
            echo "Error output:"
            cat keystore-test-artifacts/output.txt
          
            # Try common default passwords
            echo "Trying with empty password..."
            keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "" > keystore-test-artifacts/empty.txt 2>&1 || true
          
            echo "Trying with 'android' password..."
            keytool -list -keystore keystore-test-artifacts/release.keystore -storepass "android" > keystore-test-artifacts/android.txt 2>&1 || true
          fi

      - name: Detect Keystore Type
        if: always()
        run: |
          echo "Attempting to detect keystore type..."
          
          # Check for PKCS12
          echo "=== Testing PKCS12 ==="
          keytool -list -keystore keystore-test-artifacts/release.keystore -storetype PKCS12 -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > keystore-test-artifacts/type-pkcs12.txt 2>&1 || true
          
          # Check for JKS
          echo "=== Testing JKS ==="
          keytool -list -keystore keystore-test-artifacts/release.keystore -storetype JKS -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > keystore-test-artifacts/type-jks.txt 2>&1 || true
          
          # Check for JCEKS
          echo "=== Testing JCEKS ==="
          keytool -list -keystore keystore-test-artifacts/release.keystore -storetype JCEKS -storepass "${{ secrets.KEYSTORE_PASSWORD }}" > keystore-test-artifacts/type-jceks.txt 2>&1 || true
          
          echo "Results:"
          for type in pkcs12 jks jceks; do
            if grep -q "Keystore type:" keystore-test-artifacts/type-$type.txt; then
              echo "✅ $type format is compatible"
              grep "Keystore type:" keystore-test-artifacts/type-$type.txt
            else
              echo "❌ $type format failed"
            fi
          done

      - name: Test JAR Signing Capability
        if: always()
        run: |
          echo "Testing if keystore can sign a JAR file..."
          
          # Create a simple test JAR
          echo "Test content for signing" > keystore-test-artifacts/test.txt
          jar cf keystore-test-artifacts/test.jar keystore-test-artifacts/test.txt
          
          echo "Original JAR created:"
          ls -lh keystore-test-artifacts/test.jar
          
          # Attempt to sign the JAR
          echo "Attempting to sign JAR with jarsigner..."
          jarsigner -keystore keystore-test-artifacts/release.keystore \
                    -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                    -signedjar keystore-test-artifacts/signed.jar \
                    keystore-test-artifacts/test.jar \
                    "${{ secrets.KEY_ALIAS }}" > keystore-test-artifacts/signing-output.txt 2>&1 || true
          
          if [ -f keystore-test-artifacts/signed.jar ]; then
            echo "✅ JAR signing succeeded!"
            ls -lh keystore-test-artifacts/signed.jar
            
            # Verify the signature
            echo "Verifying signed JAR..."
            jarsigner -verify keystore-test-artifacts/signed.jar > keystore-test-artifacts/verify.txt 2>&1 || true
            cat keystore-test-artifacts/verify.txt
          else
            echo "❌ JAR signing failed"
            echo "Signing output:"
            cat keystore-test-artifacts/signing-output.txt
          fi

      - name: Compare with Debug Keystore
        if: always()
        run: |
          echo "Comparing with debug keystore for reference..."
          
          if [ -f "keystore/debug.keystore" ]; then
            echo "=== Debug Keystore Info ==="
            keytool -list -keystore keystore/debug.keystore -storepass "android" | grep -v "Certificate fingerprint"
            
            # Try signing with debug keystore
            echo "Testing debug keystore signing..."
            jarsigner -keystore keystore/debug.keystore \
                      -storepass "android" \
                      -signedjar keystore-test-artifacts/debug-signed.jar \
                      keystore-test-artifacts/test.jar \
                      "androiddebugkey" > keystore-test-artifacts/debug-signing.txt 2>&1 || true
            
            if [ -f keystore-test-artifacts/debug-signed.jar ]; then
              echo "✅ Debug keystore can sign files successfully"
              ls -la keystore-test-artifacts/debug-signed.jar
            else
              echo "❌ Even debug keystore failed to sign"
              cat keystore-test-artifacts/debug-signing.txt
            fi
          else
            echo "Debug keystore not found at keystore/debug.keystore"
          fi

      - name: Test with Different jarsigner Options
        if: always()
        run: |
          echo "Testing jarsigner with different options..."
          
          # Try with explicit storetype
          echo "=== Trying with explicit -storetype PKCS12 ==="
          jarsigner -keystore keystore-test-artifacts/release.keystore \
                    -storetype PKCS12 \
                    -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                    -signedjar keystore-test-artifacts/signed-pkcs12.jar \
                    keystore-test-artifacts/test.jar \
                    "${{ secrets.KEY_ALIAS }}" > keystore-test-artifacts/signing-pkcs12.txt 2>&1 || true
          
          # Try with JKS storetype
          echo "=== Trying with explicit -storetype JKS ==="
          jarsigner -keystore keystore-test-artifacts/release.keystore \
                    -storetype JKS \
                    -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                    -signedjar keystore-test-artifacts/signed-jks.jar \
                    keystore-test-artifacts/test.jar \
                    "${{ secrets.KEY_ALIAS }}" > keystore-test-artifacts/signing-jks.txt 2>&1 || true
          
          # Try without explicit storetype (auto-detect)
          echo "=== Trying without explicit -storetype (auto-detect) ==="
          jarsigner -keystore keystore-test-artifacts/release.keystore \
                    -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                    -signedjar keystore-test-artifacts/signed-auto.jar \
                    keystore-test-artifacts/test.jar \
                    "${{ secrets.KEY_ALIAS }}" > keystore-test-artifacts/signing-auto.txt 2>&1 || true
          
          echo "Results summary:"
          for test in pkcs12 jks auto; do
            if [ -f keystore-test-artifacts/signed-$test.jar ]; then
              echo "✅ $test approach worked"
            else
              echo "❌ $test approach failed:"
              cat keystore-test-artifacts/signing-$test.txt | head -2
            fi
          done

      - name: Analyze Private Key Accessibility
        if: always()
        run: |
          echo "Analyzing private key accessibility..."
          
          # Try to export the certificate
          echo "=== Attempting to export certificate ==="
          keytool -exportcert -keystore keystore-test-artifacts/release.keystore \
                  -storepass "${{ secrets.KEYSTORE_PASSWORD }}" \
                  -alias "${{ secrets.KEY_ALIAS }}" \
                  -file keystore-test-artifacts/cert.der > keystore-test-artifacts/export-cert.txt 2>&1 || true
          
          if [ -f keystore-test-artifacts/cert.der ]; then
            echo "✅ Certificate export successful"
            file keystore-test-artifacts/cert.der
            
            # Analyze the certificate
            if command -v openssl &> /dev/null; then
              echo "Certificate details:"
              openssl x509 -in keystore-test-artifacts/cert.der -inform DER -text -noout | head -20
            fi
          else
            echo "❌ Certificate export failed"
            cat keystore-test-artifacts/export-cert.txt
          fi

      - name: Final Summary
        if: always()
        run: |
          echo "================================================"
          echo "         KEYSTORE DIAGNOSTIC SUMMARY           "
          echo "================================================"
          
          echo ""
          echo "✓ Tests completed:"
          echo "  - Keystore decoding"
          echo "  - Password validation"
          echo "  - Alias verification"
          echo "  - Keystore type detection"
          echo "  - JAR signing capability"
          echo "  - Multiple signing approaches"
          echo "  - Private key accessibility"
          
          echo ""
          echo "📦 Artifacts uploaded containing:"
          echo "  - All test outputs and logs"
          echo "  - Keystore diagnostic information"
          echo "  - Signing test results"
          
          echo ""
          echo "Review the uploaded artifacts for detailed diagnostic information."

      - name: Upload Diagnostic Files
        if: always()  # Run even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: keystore-diagnostic-files
          path: keystore-test-artifacts/
          retention-days: 7
